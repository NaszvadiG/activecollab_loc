<?php

  /**
   * Pages manager
   * 
   * @package activeCollab.modules.pages
   * @subpackage models
   */
  class Pages extends ProjectObjects {
    
    /**
     * Return pages that belong to a specific milestone
     *
     * @param Milestone $milestone
     * @param integer $min_state
     * @param integer $min_visibility
     * @return array
     */
    function findByMilestone($milestone, $min_state = STATE_VISIBLE, $min_visibility = VISIBILITY_NORMAL) {
      return ProjectObjects::find(array(
        'conditions' =>  array('milestone_id = ? AND type = ? AND state >= ? AND visibility >= ?', $milestone->getId(), 'Page', $min_state, $min_visibility),
        //'order' => 'updated_on DESC'
        //'order' => ($milestone->getId()=='676' ? 'name, updated_on DESC': 'updated_on DESC'), 
        'order' => 'name, updated_on DESC',
      ));
    } // findByMilestone
    
    /**
     * Paginate pages by project
     *
     * @param Project $project
     * @param integer $page
     * @param integer $per_page
     * @param integer $min_state
     * @param integer $min_visibility
     * @return array
     */
    function paginateByProject($project, $page = 1, $per_page = 10, $min_state = STATE_VISIBLE, $min_visibility = VISIBILITY_NORMAL) {
      return ProjectObjects::paginate(array(
        'conditions' =>  array('project_id = ? AND type = ? AND state >= ? AND visibility >= ?', $project->getId(), 'Page', $min_state, $min_visibility),
        'order' => 'updated_on DESC'
      ), $page, $per_page);
    } // paginateByProject
    
    /**
     * Load pages by $category
     *
     * @param Category $category
     * @param integer $min_state
     * @param integer $min_visibility
     * @return array
     */
    function findByCategory($category, $min_state = STATE_VISIBLE, $min_visibility = VISIBILITY_NORMAL) {
      return ProjectObjects::find(array(
        'conditions' =>  array('parent_id = ? AND type = ? AND state >= ? AND visibility >= ?', $category->getId(), 'Page', $min_state, $min_visibility),
        'order' => 'ISNULL(position) ASC, position'
      ));
    } // findByCategory
    
	//BOF:mod 20121108
    function findByCategoryNew($project_id, $category_id, $min_state = STATE_VISIBLE, $min_visibility = VISIBILITY_NORMAL) {
		$resp = array();
		$link = mysql_connect(DB_HOST, DB_USER, DB_PASS);
		mysql_select_db(DB_NAME);
		
		if ( (int)$category_id>0 ){
			$query = "select a.id from healingcrystals_project_objects a inner join healingcrystals_project_object_categories b on a.id=b.object_id where a.project_id='" . $project_id . "' and a.type='Page' and a.state>='" . $min_state . "' and a.visibility>='" . $min_visibility . "' ";
			$query .= " and b.category_id='" . $category_id . "' ";
		} else {
			$query = "select a.id from healingcrystals_project_objects a left join healingcrystals_project_object_categories b on a.id=b.object_id where a.project_id='" . $project_id . "' and a.type='Page' and a.state>='" . $min_state . "' and a.visibility>='" . $min_visibility . "' ";
			$query .= " and (b.category_id is null or b.category_id='0') ";
		}
		$query .= " order by updated_on DESC";
		mysql_query("insert into testing (content, date_added) values ('" . mysql_real_escape_string($query) . "', now())");
		$result = mysql_query($query, $link);
		while ( $entry = mysql_fetch_assoc($result) ){
			$resp[] = new Page($entry['id']);
		}
		mysql_close($link);
		return $resp;
    } // findByCategory
	//EOF:mod 20121108
	
    /**
     * Return subpages
     *
     * @param Page $page
     * @param integer $min_state
     * @param integer $min_visibility
     * @return array
     */
    function findSubpages($page, $min_state = STATE_VISIBLE, $min_visibility = VISIBILITY_NORMAL) {
      return Pages::find(array(
        'conditions' => array('parent_id = ? AND type = ? AND state >= ? AND visibility >= ?', $page->getId(), 'Page', $min_state, $min_visibility, false),
        'order' => 'ISNULL(position) ASC, position'
      ));
    } // findSubpages
  
  } // Pages

?>